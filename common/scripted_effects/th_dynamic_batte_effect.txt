TH_clear_ship_modifier = {
    optimize_memory
    export_modifier_to_variable = { modifier = $modifier$ variable = th_$modifier$_calc_value }
    [[minus] subtract_variable = { which = th_$modifier$_calc_value value = $minus$ } ]
    [[add] change_variable = { which = th_$modifier$_calc_value value = $add$ } ]
    [[mul] multiply_variable = { which = th_$modifier$_calc_value value = $mul$ } ]
    [[div] divide_variable = { which = th_$modifier$_calc_value value = $div$ } ]
    add_modifier = { modifier = TH_dynamic_remove_$modifier$ multiplier = th_$modifier$_calc_value }
    clear_variable = th_$modifier$_calc_value
}

TH_add_modifier = {
    optimize_memory
    export_modifier_to_variable = { modifier = $modifier$ variable = th_$modifier$_calc_value }
    add_modifier = { modifier = TH_dynamic_reset_$modifier$ multiplier = $value$ }
    clear_variable = th_$modifier$_calc_value
}

TH_dynamic_modifier_conditional = {
    optimize_memory
    set_variable = { which = spth_$modifier$_calc_value value = modifier:$modifier$ }
    if = {
        limit = {
            NOT = { has_ship_flag = spth_$modifier$_checked }
        }
        if = {
            limit = { check_variable = { which = spth_$modifier$_calc_value value $relation$ $limit_value$ } }
            set_timed_ship_flag = { flag = spth_$modifier$_checked days = 1 }
            add_modifier = { modifier = TH_dynamic_remove_$modifier$ multiplier = spth_$modifier$_calc_value }
            add_modifier = { modifier = TH_dynamic_reset_$modifier$ multiplier = $value$ }
        }
    }
    clear_variable = spth_$modifier$_calc_value
}
TH_timed_check_modifier = {
    optimize_memory
    export_modifier_to_variable = {
        modifier = $modifier$
        variable = spth_check_value_$modifier$
    }
    if = {
        limit = {
            check_variable = { which = spth_check_value_$modifier$ value $relation$ $check_value$ }
        }
        set_timed_ship_flag = { flag = spth_check_value_$modifier$_checkpoint days = 1 }
        add_modifier = { modifier = TH_dynamic_remove_$modifier$ multiplier = spth_check_value_$modifier$ days = $days$ }
        add_modifier = { modifier = TH_dynamic_reset_$modifier$ multiplier = $value$ days = $days$ }
    }
    clear_variable = spth_check_value_$modifier$
}

sakuya_the_world_dynamic = {
    optimize_memory
    if = {
        limit = {
            is_in_combat = yes
        }

        TH_dynamic_modifier_conditional = { modifier = ship_accuracy_mult relation = ">" limit_value = -1 value = -1 }
        TH_dynamic_modifier_conditional = { modifier = ship_speed_mult relation = ">" limit_value = -1 value = -1 }
        TH_dynamic_modifier_conditional = { modifier = ship_fire_rate_mult relation = ">" limit_value = -1 value = -1 }
        TH_dynamic_modifier_conditional = { modifier = ship_evasion_mult relation = ">" limit_value = -1 value = -1 }
        TH_dynamic_modifier_conditional = { modifier = ship_tracking_mult relation = ">" limit_value = -1 value = -1 }

        ship_event = { id = Th_dynamic_battle_vict.1 days = $interval$ }
    } else = {
        TH_clear_all_dynamic_modifier = yes
        if = {
            limit = { has_ship_flag = TH_sakuya_the_world_dynamic_vict }
            remove_ship_flag = TH_sakuya_the_world_dynamic_vict
        }
    }
}

spth_dynamic_battle_init = {
    optimize_memory
    fromfrom = {
        if = {
            limit = { NOT = { has_fleet_flag = TH_$type$_dynamic_boost } }
            every_owned_ship = { set_variable = { which = $type$_dynamic_boost_duration_debug value = modifier:$modifier$ } }
            random_owned_ship = {
                limit = { check_modifier_value = { modifier = $modifier$ value > 0 } }
                prev = {
                    set_variable = { which = $type$_dynamic_boost_duration_debug value = prev.modifier:$modifier$ }
                    set_timed_fleet_flag = { flag = TH_$type$_dynamic_boost days = prev.modifier:$modifier$ }
                }
                save_event_target_as = spth_dynamic_battle_init_$type$_temp
            }
            fleet_event = { id = $boost_id$ }
            clear_variable = $type$_dynamic_boost_duration_debug
        }
    }
    fromfromfrom = {
        if = {
            limit = { NOT = { has_fleet_flag = TH_$type$_dynamic_vict } }
            every_owned_ship = { set_variable = { which = $type$_dynamic_vict_duration_debug value = event_target:spth_dynamic_battle_init_$type$_temp.modifier:$modifier$ } }
            set_variable = { which = $type$_dynamic_vict_duration_debug value = event_target:spth_dynamic_battle_init_$type$_temp.modifier:$modifier$ }
            set_timed_fleet_flag = { flag = TH_$type$_dynamic_vict days = event_target:spth_dynamic_battle_init_$type$_temp.modifier:$modifier$ }
            fleet_event = { id = $vict_id$ }
            clear_variable = $type$_dynamic_vict_duration_debug
        }
    }
}
satori_dynamic_battle = {
    optimize_memory
    if = {
        limit = { is_in_combat = yes }
        every_owned_ship = {
            TH_dynamic_modifier_conditional = { modifier = ship_evasion_mult relation = ">" limit_value = -1 value = -1 }
            TH_dynamic_modifier_conditional = { modifier = ship_evasion_add relation = ">" limit_value = -100 value = -100 }
        }
        fleet_event = { id = Th_dynamic_battle_vict.2 days = $interval$ }
    }
    else = {
        if = {
            limit = { has_fleet_flag = TH_satori_dynamic_vict }
            remove_fleet_flag = TH_satori_dynamic_vict
        }
        every_owned_ship = {
            TH_clear_all_dynamic_modifier = yes
            clear_variable = satori_dynamic_vict_duration_debug
        }
    }
}
satori_dynamic_boost = {
    optimize_memory
    if = {
        limit = { is_in_combat = yes }
        every_owned_ship = {
            TH_dynamic_modifier_conditional = { modifier = ship_accuracy_add relation = "<" limit_value = 100 value = 100 }
            TH_dynamic_modifier_conditional = { modifier = ship_accuracy_mult relation = "<" limit_value = 1 value = 1 }
            TH_dynamic_modifier_conditional = { modifier = ship_tracking_add relation = "<" limit_value = 100 value = 100 }
            TH_dynamic_modifier_conditional = { modifier = ship_tracking_mult relation = "<" limit_value = 1 value = 1 }
        }
        fleet_event = { id = Th_dynamic_battle_vict.3 days = $interval$ }
    }
    else = {
        if = {
            limit = { has_fleet_flag = TH_satori_dynamic_boost }
            remove_fleet_flag = TH_satori_dynamic_boost
        }
        every_owned_ship = {
            TH_clear_all_dynamic_modifier = yes
            clear_variable = satori_dynamic_boost_duration_debug
        }
    }
}
koishi_dynamic_battle = {
    optimize_memory
    if = {
        limit = { is_in_combat = yes }
        every_owned_ship = {
            TH_dynamic_modifier_conditional = { modifier = ship_accuracy_add relation = ">" limit_value = -100 value = -100 }
            TH_dynamic_modifier_conditional = { modifier = ship_tracking_add relation = ">" limit_value = -100 value = -100 }
            TH_dynamic_modifier_conditional = { modifier = ship_accuracy_mult relation = ">" limit_value = -1 value = -1 }
            TH_dynamic_modifier_conditional = { modifier = ship_tracking_mult relation = ">" limit_value = -1 value = -1 }
        }
        fleet_event = { id = Th_dynamic_battle_vict.4 days = $interval$ }
    }
    else = {
        if = {
            limit = { has_fleet_flag = TH_koishi_dynamic_vict }
            remove_fleet_flag = TH_koishi_dynamic_vict
        }
        every_owned_ship = {
            TH_clear_all_dynamic_modifier = yes
            clear_variable = koishi_dynamic_vict_duration_debug
        }
    }
}
koishi_dynamic_boost = {
    optimize_memory
    if = {
        limit = { is_in_combat = yes }
        every_owned_ship = {
            TH_dynamic_modifier_conditional = { modifier = ship_evasion_mult relation = "<" limit_value = 1 value = 1 }
            TH_dynamic_modifier_conditional = { modifier = ship_evasion_add relation = "<" limit_value = 90 value = 90 }
        }
        fleet_event = { id = Th_dynamic_battle_vict.5 days = $interval$ }
    }
    else = {
        if = {
            limit = { has_fleet_flag = TH_koishi_dynamic_boost }
            remove_fleet_flag = TH_koishi_dynamic_boost
        }
        every_owned_ship = {
            TH_clear_all_dynamic_modifier = yes
            clear_variable = koishi_dynamic_boost_duration_debug
        }
    }
}

TH_test_boost = {
    optimize_memory
    if = {
        limit = { is_in_combat = yes }

        TH_dynamic_modifier_conditional = { modifier = ship_armor_hardening_add relation = "<" limit_value = 0.50 value = 0.50 }
        TH_dynamic_modifier_conditional = { modifier = ship_shield_hardening_add relation = "<" limit_value = 0.50 value = 0.50 }

        ship_event = { id = Th_dynamic_battle_vict.301 days = 2 }
    } else = {
        TH_clear_all_dynamic_modifier = yes
        if = {
            limit = {
                has_ship_flag = TH_test
            }
            remove_ship_flag = TH_test
        }
    }
}

# 检测舰队装甲与护盾效率
# This: our fleet
spth_armor_shield_efficiency_system_check = {
    optimize_memory
    export_trigger_value_to_variable = {
        trigger = count_owned_ship
        variable = spth_shield_efficiency_count
        parameters = { limit = { check_modifier_value = { modifier = ship_spth_shield_efficiency value > 0 } } }
    }
    export_trigger_value_to_variable = {
        trigger = count_owned_ship
        variable = spth_armor_efficiency_count
        parameters = { limit = { check_modifier_value = { modifier = ship_spth_shield_efficiency value > 0 } } }
    }
    set_update_modifiers_batch = begin
    if = {
        limit = { check_variable = { which = spth_shield_efficiency_count value > 0 } }
        if = {
            limit = { NOT = { has_fleet_flag = has_spth_shield_efficiency_buff } }
            set_fleet_flag = has_spth_shield_efficiency_buff
            # from = { every_owned_ship = { set_ship_flag = has_spth_shield_efficiency_debuff } }
        }
    } else = {
        remove_fleet_flag = has_spth_shield_efficiency_buff
        # from = { every_owned_ship = { remove_ship_flag = has_spth_shield_efficiency_debuff } }
    }
    if = {
        limit = { check_variable = { which = spth_armor_efficiency_count value > 0 } }
        if = {
            limit = { NOT = { has_fleet_flag = has_spth_armor_efficiency_buff } }
            set_fleet_flag = has_spth_armor_efficiency_buff
            # from = { every_owned_ship = { set_ship_flag = has_spth_armor_efficiency_debuff } }
        }
    } else = {
        remove_fleet_flag = has_spth_armor_efficiency_buff
        # from = { every_owned_ship = { remove_ship_flag = has_spth_armor_efficiency_debuff } }
    }
    # from = { every_owned_ship = { spth_armor_shield_efficiency_system_debuff = yes } }
    every_owned_ship = { spth_armor_shield_efficiency_system_buff = yes }
    set_update_modifiers_batch = end
}
#This: enemy fleet
spth_armor_shield_efficiency_system_check_enemy = {
    optimize_memory
    set_update_modifiers_batch = begin
    # if = {
    #     limit = { check_variable = { which = spth_shield_efficiency_count value > 0 } }
    #     if = {
    #         limit = { NOT = { has_fleet_flag = has_spth_shield_efficiency_buff } }
    #         set_fleet_flag = has_spth_shield_efficiency_buff
    #         from = { every_owned_ship = { set_ship_flag = has_spth_shield_efficiency_debuff } }
    #     }
    # } else = {
    #     remove_fleet_flag = has_spth_shield_efficiency_buff
    #     from = { every_owned_ship = { remove_ship_flag = has_spth_shield_efficiency_debuff } }
    # }
    # if = {
    #     limit = { check_variable = { which = spth_armor_efficiency_count value > 0 } }
    #     if = {
    #         limit = { NOT = { has_fleet_flag = has_spth_armor_efficiency_buff } }
    #         set_fleet_flag = has_spth_armor_efficiency_buff
    #         from = { every_owned_ship = { set_ship_flag = has_spth_armor_efficiency_debuff } }
    #     }
    # } else = {
    #     remove_fleet_flag = has_spth_armor_efficiency_buff
    #     from = { every_owned_ship = { remove_ship_flag = has_spth_armor_efficiency_debuff } }
    # }
    every_owned_ship = { set_ship_flag = has_spth_shield_efficiency_debuff }
    every_owned_ship = { set_ship_flag = has_spth_armor_efficiency_debuff }
    every_owned_ship = { spth_armor_shield_efficiency_system_debuff = yes }
    set_update_modifiers_batch = end
}
# 加成系统
spth_armor_shield_efficiency_system_buff = {
    optimize_memory
    # set_update_modifiers_batch = begin
    add_modifier = { modifier = spth_shield_efficiency_regen multiplier = value:ship_spth_shield_efficiency_count }
    add_modifier = { modifier = spth_armor_efficiency_regen multiplier = value:ship_spth_armor_efficiency_count }
    set_variable = { which = spth_shield_efficiency_var_debug value = modifier:ship_spth_shield_efficiency }
    export_modifier_to_variable = { modifier = ship_shield_hardening_add variable = spth_shield_efficiency_var_hardening }
    if = {
        limit = { check_variable = { which = spth_shield_efficiency_var_hardening value < spth_shield_efficiency_var_debug } }
        add_modifier = { modifier = spth_shield_efficiency_hardening multiplier = spth_shield_efficiency_var_hardening }
        add_modifier = { modifier = spth_shield_efficiency_hardening_rst multiplier = spth_shield_efficiency_var_debug }
    }
    set_variable = { which = spth_armor_efficiency_var_debug value = modifier:ship_spth_armor_efficiency }
    export_modifier_to_variable = { modifier = ship_armor_hardening_add variable = spth_armor_efficiency_var_hardening }
    if = {
        limit = { check_variable = { which = spth_armor_efficiency_var_hardening value < spth_armor_efficiency_var_debug } }
        add_modifier = { modifier = spth_armor_efficiency_hardening multiplier = spth_armor_efficiency_var_hardening }
        add_modifier = { modifier = spth_armor_efficiency_hardening_rst multiplier = spth_armor_efficiency_var_debug }
    }
    # set_update_modifiers_batch = end
}
# 减益系统
spth_armor_shield_efficiency_system_debuff = {
    optimize_memory
    # set_update_modifiers_batch = begin
    if = {
        limit = { has_ship_flag = has_spth_shield_efficiency_debuff }
        TH_dynamic_modifier_conditional = {
            modifier = "ship_shield_penetration_mult"
            relation = ">"
            limit_value = 1
            value = 1
        }
        TH_dynamic_modifier_conditional = {
            modifier = "ship_shield_penetration_add"
            relation = ">"
            limit_value = 1
            value = 1
        }
    }
    if = {
        limit = { has_ship_flag = has_spth_armor_efficiency_debuff }
        TH_dynamic_modifier_conditional = {
            modifier = "ship_armor_penetration_mult"
            relation = ">"
            limit_value = 1
            value = 1
        }
        TH_dynamic_modifier_conditional = {
            modifier = "ship_armor_penetration_add"
            relation = ">"
            limit_value = 1
            value = 1
        }
    }
    # set_update_modifiers_batch = end
}
# 系统结束运行
spth_armor_shield_efficiency_system_end = {
    optimize_memory
    clear_variable = spth_shield_efficiency_var_debug
    clear_variable = spth_armor_efficiency_var_debug
    clear_variable = spth_shield_efficiency_var_hardening
    clear_variable = spth_armor_efficiency_var_hardening
    remove_ship_flag = has_spth_shield_efficiency_debuff
    remove_ship_flag = has_spth_armor_efficiency_debuff
    remove_modifier = spth_shield_efficiency_hardening
    remove_modifier = spth_armor_efficiency_hardening
    remove_modifier = spth_shield_efficiency_hardening_rst
    remove_modifier = spth_armor_efficiency_hardening_rst
    remove_modifier = spth_shield_efficiency_regen
    remove_modifier = spth_armor_efficiency_regen
    remove_modifier = spth_shield_efficiency_debuff
    remove_modifier = spth_armor_efficiency_debuff
    clear_variable = spth_shield_damage_debuff
    clear_variable = spth_armor_damage_debuff
    TH_clear_all_dynamic_modifier = yes
}
# This: our fleet
spth_armor_shield_efficiency_system_end_fleet = {
    optimize_memory
    clear_variable = spth_shield_efficiency_count
    clear_variable = spth_armor_efficiency_count
    remove_fleet_flag = has_spth_shield_efficiency_buff
    remove_fleet_flag = has_spth_armor_efficiency_buff
    clear_variable = spth_shield_damage_debuff
    clear_variable = spth_armor_damage_debuff
    every_owned_ship = { spth_armor_shield_efficiency_system_end = yes }
    remove_fleet_flag = has_triggered_spth_effiency_self
    # from = { every_owned_ship = { spth_armor_shield_efficiency_system_end = yes } }
}
# This: enemy fleet
spth_armor_shield_efficiency_system_end_fleet_enemy = {
    optimize_memory
    every_owned_ship = { spth_armor_shield_efficiency_system_end = yes }
    remove_fleet_flag = has_triggered_spth_effiency_enemy
}
# 舰队数据刷新
# this = fleet
# from = enemy fleet
spth_story_crisis_weapon_system_fleet = {
    optimize_memory
    # 刷新季节
    if = {
        limit = { spth_is_specified_season = { winter = yes spring = yes } }
        every_owned_ship = {
            remove_ship_flag = spth_summer_or_autumn
            set_ship_flag = spth_winter_or_spring
        }
    } else = {
        every_owned_ship = {
            remove_ship_flag = spth_winter_or_spring
            set_ship_flag = spth_summer_or_autumn
        }
    }
    # 舰船刷新
    every_owned_ship = {
        spth_story_crisis_weapon_system_dynamic_tag = yes
        spth_story_crisis_weapon_system_self = yes
    }
}
spth_story_crisis_weapon_system_clear_flags = {
    optimize_memory
    remove_ship_flag = spth_story_crwpn_combat_days_cd
    remove_ship_flag = spth_winter_or_spring
    remove_ship_flag = spth_summer_or_autumn
    remove_ship_flag = spth_story_crisis_titan_kinetic_system
    remove_ship_flag = spth_story_crisis_titan_energy_system
    remove_ship_flag = spth_story_crisis_titan_generic_system
    remove_ship_flag = spth_story_crisis_titan_generic_cooldown
    remove_ship_flag = spth_story_crisis_extra_generic_system
    remove_ship_flag = spth_deep_sea_mysteries_cooldown
    remove_ship_flag = spth_story_crisis_extra_kinetic_system
    remove_ship_flag = spth_story_crisis_extra_energy_system
    remove_ship_flag = spth_story_crisis_g_system
    remove_ship_flag = spth_story_crisis_g_cooldown
    remove_ship_flag = spth_story_crisis_computer_protect
    remove_ship_flag = spth_story_crisis_computer_protect_cd
}
spth_story_crisis_weapon_system_clear_mods = {
    optimize_memory
    remove_modifier = scarlet_harvest_upgrade
    remove_modifier = scarlet_harvest_regen
    remove_modifier = sakura_yyk_upgrade
    remove_modifier = sakura_yyk_efficiency
    remove_modifier = sakura_yyk_upkeep
    remove_modifier = sakura_yyk_spring
    remove_modifier = sakura_yyk_autumn
    remove_modifier = white_fog_random_damage
    remove_modifier = white_fog_random_fire_rate
    remove_modifier = white_fog_cooldown
    remove_modifier = white_fog_upgrade
    remove_modifier = spth_deep_sea_mysteries_upgrade
    remove_modifier = spth_deep_sea_mysteries_convert
    remove_modifier = sakura_yyk_xl_damage
    remove_modifier = sakura_yyk_xl_fire_rate
    remove_modifier = scarlet_night_xl_damage
    remove_modifier = scarlet_night_xl_fire_rate
    remove_modifier = forbidden_tsiang_hsien_damage
    remove_modifier = forbidden_tsiang_hsien_fire_rate
    remove_modifier = spth_morse_masquerade_upgrade
    remove_modifier = spth_morse_masquerade_upgrade_45
    remove_modifier = spth_morse_masquerade_cooldown
    remove_modifier = spth_story_crisis_computer_protect
    remove_modifier = spth_story_crisis_computer_efficiency
}
spth_story_crisis_weapon_system_clear_vars = {
    optimize_memory
    clear_variable = white_fog_random_var
    clear_variable = spth_story_crwpn_combat_days
    clear_variable = spth_story_crisis_titan_kinetic_var
    clear_variable = spth_story_crisis_titan_kinetic_repair_perc
    clear_variable = spth_story_crisis_titan_energy_var
    clear_variable = spth_weapon_sakura_point
    clear_variable = spth_weapon_sakura_point_d_a
    clear_variable = spth_weapon_sakura_upgrade_var
    clear_variable = spth_weapon_sakura_upgrade_max
    clear_variable = spth_story_crisis_titan_generic_var
    clear_variable = spth_story_crisis_titan_generic_max
    clear_variable = spth_story_crisis_titan_generic_temp
    clear_variable = spth_story_crisis_titan_generic_factor
    clear_variable = spth_story_crisis_titan_generic_chance
    clear_variable = spth_story_crisis_extra_kinetic_var
    clear_variable = spth_story_crisis_extra_energy_var
    clear_variable = spth_story_crisis_g_fire_counter
}
spth_story_crisis_weapon_system_dynamic_tag = {
    optimize_memory
    # 取动能与能量中最大者进行加成
    # 需要计算提取的动能/能量，选最大值给自身tag。
    if = {
        limit = {
            OR = {
                has_ship_flag = spth_story_crisis_extra_generic_system
                has_ship_flag = spth_story_crisis_titan_generic_system
            }
        }
        set_variable = {
            which = white_fog_random_var
            value = modifier:weapon_type_energy_weapon_damage_mult
        }
        if = {
            limit = {
                check_variable = {
                    which = white_fog_random_var
                    value < modifier:weapon_type_kinetic_weapon_damage_mult
                }
            }
            export_modifier_to_variable = {
                variable = white_fog_random_var
                modifier = weapon_type_kinetic_weapon_damage_mult
            }
        }
        remove_modifier = white_fog_random_damage
        add_modifier = {
            modifier = white_fog_random_damage
            multiplier = white_fog_random_var
        }
        set_variable = {
            which = white_fog_random_var
            value = modifier:weapon_type_energy_weapon_fire_rate_mult
        }
        if = {
            limit = {
                check_variable = {
                    which = white_fog_random_var
                    value < modifier:weapon_type_kinetic_weapon_fire_rate_mult
                }
            }
            export_modifier_to_variable = {
                variable = white_fog_random_var
                modifier = weapon_type_kinetic_weapon_fire_rate_mult
            }
        }
        # if = {
        #     limit = { check_variable = { which = white_fog_random_var value > 2.56 } }
        #     set_variable = { which = white_fog_random_var value = 2.56 }
        # }
        remove_modifier = white_fog_random_fire_rate
        add_modifier = {
            modifier = white_fog_random_fire_rate
            multiplier = white_fog_random_var
        }
    }
    if = {
        limit = { has_ship_flag = spth_story_crisis_extra_energy_system }
        remove_modifier = sakura_yyk_xl_damage
        remove_modifier = sakura_yyk_xl_fire_rate
        add_modifier = {
            modifier = sakura_yyk_xl_damage
            multiplier = value:spth_story_crisis_extra_energy_damage
        }
        add_modifier = {
            modifier = sakura_yyk_xl_fire_rate
            multiplier = value:spth_story_crisis_extra_energy_fire_rate
        }
    }
    if = {
        limit = { has_ship_flag = spth_story_crisis_extra_kinetic_system }
        remove_modifier = scarlet_night_xl_damage
        remove_modifier = scarlet_night_xl_fire_rate
        add_modifier = {
            modifier = scarlet_night_xl_damage
            multiplier = value:spth_story_crisis_extra_kinetic_damage
        }
        add_modifier = {
            modifier = scarlet_night_xl_fire_rate
            multiplier = value:spth_story_crisis_extra_kinetic_fire_rate
        }
    }
}
spth_story_crisis_weapon_system_self = {
    optimize_memory
    # 战斗天数计数器
    if = {
        limit = { NOT = { has_ship_flag = spth_story_crwpn_combat_days_cd } }
        set_timed_ship_flag = { flag = spth_story_crwpn_combat_days_cd days = 1 }
        change_variable = { which = spth_story_crwpn_combat_days value = 1 }
    }
    # 红夜「湮灭」
    if = {
        limit = { has_ship_flag = spth_story_crisis_titan_kinetic_system }
        random_list = {
            32 = { spth_repair_ship_perc = { hp_perc = spth_story_crisis_titan_kinetic_repair_perc ar_perc = spth_story_crisis_titan_kinetic_repair_perc } }
            68 = {}
        }
    }
    # 终焉「千桜华宴」
    if = {
        limit = { has_ship_flag = spth_story_crisis_titan_energy_system }
        switch = {
            trigger = has_ship_flag
            spth_summer_or_autumn = {
                if = {
                    limit = { has_modifier = sakura_yyk_spring }
                    remove_modifier = sakura_yyk_spring
                }
                if = {
                    limit = { NOT = { has_modifier = sakura_yyk_autumn } }
                    add_modifier = { modifier = sakura_yyk_autumn }
                }
            }
            spth_winter_or_spring = {
                if = {
                    limit = { has_modifier = sakura_yyk_autumn }
                    remove_modifier = sakura_yyk_autumn
                }
                if = {
                    limit = { NOT = { has_modifier = sakura_yyk_spring } }
                    add_modifier = { modifier = sakura_yyk_spring }
                }
            }
        }
        if = {
            limit = {
                check_variable = { which = spth_weapon_sakura_point value >= 24 }
                NOT = { has_modifier = sakura_yyk_efficiency }
            }
            add_modifier = { modifier = sakura_yyk_efficiency }
        }
        if = {
            limit = { check_variable = { which = spth_weapon_sakura_point value >= 32 } }
            if = {
                limit = { NOT = { has_modifier = sakura_yyk_upkeep } }
                add_modifier = { modifier = sakura_yyk_upkeep }
            }
            random_list = {
                30 = { spth_repair_ship_perc = { hp_perc = 0.10 ar_perc = 0.10 } }
                30 = { spth_repair_ship_perc = { hp_perc = 0.16 ar_perc = 0.16 } }
                20 = { spth_repair_ship_perc = { hp_perc = 0.24 ar_perc = 0.24 } }
                20 = { spth_repair_ship_perc = { hp_perc = 0.32 ar_perc = 0.32 } }
            }
        }
    }
    # 乖离「无名迷雾」
    # 每个武器提供*400%，不得超过*2000%，每天刷新一次。
    # 导出tag伤害加成，*20为最大限制。
    if = {
        limit = { has_ship_flag = spth_story_crisis_titan_generic_system }
        # 计算上限
        export_modifier_to_variable = {
            modifier = weapon_type_lingli_weapon_damage_mult
            variable = spth_story_crisis_titan_generic_temp
        }
        export_modifier_to_variable = {
            modifier = weapon_type_white_fog_random_weapon_damage_mult
            variable = spth_story_crisis_titan_generic_max
        }
        change_variable = {
            which = spth_story_crisis_titan_generic_max
            value = spth_story_crisis_titan_generic_temp
        }
        set_variable = {
            which = spth_story_crisis_titan_generic_factor
            value = spth_story_crisis_titan_generic_max
        }
        multiply_variable = { which = spth_story_crisis_titan_generic_max value = 36 }
        random = {
            chance = spth_story_crisis_titan_generic_chance
            if = {
                limit = { NOT = { has_ship_flag = spth_story_crisis_titan_generic_cooldown } }
                set_timed_ship_flag = { flag = spth_story_crisis_titan_generic_cooldown days = 5 }
                multiply_variable = { which = spth_story_crisis_titan_generic_factor value = 8 }
                multiply_variable = {
                    which = spth_story_crisis_titan_generic_factor
                    value = spth_story_crisis_titan_generic_var
                }
                if = {
                    limit = {
                        check_variable = {
                            which = spth_story_crisis_titan_generic_factor
                            value > spth_story_crisis_titan_generic_max
                        }
                    }
                    set_variable = {
                        which = spth_story_crisis_titan_generic_factor
                        value = spth_story_crisis_titan_generic_max
                    }
                }
                remove_modifier = white_fog_cooldown
                add_modifier = {
                    modifier = white_fog_upgrade
                    multiplier = spth_story_crisis_titan_generic_factor
                    days = 3
                }
                ship_event = { id = Th_dynamic_battle_vict.41 days = 3 }
            }
        }
        reroll_random = yes
    }
    # 玲珑迷雾
    if = {
        limit = { has_ship_flag = spth_story_crisis_extra_generic_system }
        if = {
            limit = { NOT = { has_ship_flag = spth_deep_sea_mysteries_cooldown } }
            set_timed_ship_flag = { flag = spth_deep_sea_mysteries_cooldown days = 10 }
            set_variable = {
                which = spth_deep_sea_mysteries_var
                value = modifier:weapon_type_energy_weapon_fire_rate_mult
            }
            change_variable = {
                which = spth_deep_sea_mysteries_var
                value = modifier:weapon_type_kinetic_weapon_fire_rate_mult
            }
            if = {
                limit = { check_variable = { which = spth_deep_sea_mysteries_var value < 0 } }
                multiply_variable = { which = spth_deep_sea_mysteries_var value = -1 }
            }
            change_variable = { which = spth_deep_sea_mysteries_var value = 50 }
            add_modifier = {
                modifier = spth_deep_sea_mysteries_upgrade
                multiplier = spth_deep_sea_mysteries_var
                days = 4
            }
            clear_variable = spth_deep_sea_mysteries_var
        }
    }
    # 禁弹「血族启示录」
    if = {
        limit = { has_ship_flag = spth_story_crisis_g_system }
        if = {
            limit = {
                NOT = {
                    has_modifier = spth_morse_masquerade_cooldown
                    has_modifier = spth_morse_masquerade_upgrade
                }
            }
            add_modifier = { modifier = spth_morse_masquerade_cooldown }
        }
        if = {
            limit = { NOT = { has_ship_flag = spth_story_crisis_g_cooldown } }
            remove_modifier = spth_morse_masquerade_cooldown
            set_timed_ship_flag = { flag = spth_story_crisis_g_cooldown days = 8 }
            change_variable = { which = spth_story_crisis_g_fire_counter value = 1 }
            add_modifier = { modifier = spth_morse_masquerade_upgrade days = 2 }
            if = {
                limit = { check_variable = { which = spth_story_crisis_g_fire_counter value >= 5 } }
                set_variable = { which = spth_story_crisis_g_fire_counter value = 0 }
                add_modifier = { modifier = spth_morse_masquerade_upgrade_45 days = 2 }
            }
        }
    }
    # 保护系统
    if = {
        limit = {
            has_ship_flag = spth_story_crisis_computer_protect
            NOT = { has_ship_flag = spth_story_crisis_computer_protect_cd }
        }
        spth_repair_ship_perc = { all_hp = yes ar_perc = 1.0 }
        set_timed_ship_flag = { flag = spth_story_crisis_computer_protect_cd days = 2 }
    }
}


spth_bombardment_support_system_init = {
    optimize_memory
    if = {
        limit = { can_enable_spth_bombardment_support = yes }
        root = {
            every_owned_fleet = {
                limit = {
                    distance = { source = prevprev type = hyperlane max_jumps <= 3 }
                    any_owned_ship = { is_ship_size = spth_hv_bombardment_ship }
                }
                prevprev = {
                    if = {
                        limit = {
                            prev = {
                                distance = { source = prev type = hyperlane max_jumps <= 2 }
                                any_owned_ship = { has_component = spth_hv_bombardment_dw }
                            }
                        }
                        set_fleet_flag = spth_bombardment_support_dw
                        set_fleet_flag = has_spth_bombardment_support
                        set_timed_fleet_flag = { flag = spth_bombardment_support_dw_cd days = 4 }
                    }
                    if = {
                        limit = {
                            prev = {
                                distance = { source = prev type = hyperlane max_jumps <= 3 }
                                any_owned_ship = { has_component = spth_hv_bombardment_fc }
                            }
                        }
                        set_fleet_flag = spth_bombardment_support_fc
                        set_fleet_flag = has_spth_bombardment_support
                        set_timed_fleet_flag = { flag = spth_bombardment_support_fc_cd days = 2 }
                    }
                    if = {
                        limit = {
                            prev = {
                                distance = { source = prev type = hyperlane max_jumps <= 3 }
                                any_owned_ship = { has_component = spth_hv_bombardment_sk }
                            }
                        }
                        set_fleet_flag = spth_bombardment_support_sk
                        set_fleet_flag = has_spth_bombardment_support
                        set_timed_fleet_flag = { flag = spth_bombardment_support_sk_cd days = 2 }
                    }
                    fleet_event = {
                        id = Th_dynamic_battle_vict.46
                        scopes = { from = prev }
                    }
                }
            }
        }
    }
}
# 跨星系火力支援
# this = combat fleet
# from = support fleet
spth_bombardment_support_system = {
    optimize_memory
    if = {
        limit = {
            count_owned_ship = { count >= 1 }
            exists = from
            from = {
                distance = { source = root type = hyperlane max_jumps <= 3 }
                any_owned_ship = { is_ship_size = spth_hv_bombardment_ship }
            }
        }
        from = {
            if = {
                limit = { is_cloaked = yes }
                set_cloaking_active = no
            }
        }
        spth_bombardment_support_system_type = { type = dw cooldown = 7 tag1 = energy tag2 = kinetic }
        spth_bombardment_support_system_type = { type = fc cooldown = 5 tag1 = energy tag2 = lingli }
        spth_bombardment_support_system_type = { type = sk cooldown = 6 tag1 = lingli tag2 = kinetic }
    }
}
spth_bombardment_support_system_type = {
    optimize_memory
    if = {
        limit = {
            has_fleet_flag = spth_bombardment_support_$type$
            NOT = { has_fleet_flag = spth_bombardment_support_$type$_cd }
        }
        set_timed_fleet_flag = { flag = spth_bombardment_support_$type$_cd days = $cooldown$ }
        create_ship = {
            design = spth_hv_bombardment_ship_effect_$type$
            effect = {
                set_name = "spth_hv_bombardment_ship_effect_name"
                ship_event = { id = Th_dynamic_battle_vict.47 days = 1 }
                add_modifier = { modifier = spth_hv_bombardment_effect_fire_rate mult = modifier:ship_fire_rate_mult }
                [[tag1]
                    add_modifier = {
                        modifier = spth_hv_bombardment_effect_$tag1$_fire_rate
                        mult = modifier:weapon_type_$tag1$_weapon_fire_rate_mult
                    }
                ]
                [[tag2]
                    add_modifier = {
                        modifier = spth_hv_bombardment_effect_$tag2$_fire_rate
                        mult = modifier:weapon_type_$tag2$_weapon_fire_rate_mult
                    }
                ]
            }
        }
    }
}


TH_clear_all_dynamic_modifier = {
    optimize_memory
    # 一次修正使用
    remove_modifier = TH_dynamic_remove_ship_fire_rate_mult
    remove_modifier = TH_dynamic_remove_ship_speed_mult
    remove_modifier = TH_dynamic_remove_ship_shield_penetration_mult
    remove_modifier = TH_dynamic_remove_ship_armor_penetration_mult
    remove_modifier = TH_dynamic_remove_ship_shield_penetration_add
    remove_modifier = TH_dynamic_remove_ship_armor_penetration_add
    remove_modifier = TH_dynamic_remove_ship_armor_damage_mult
    remove_modifier = TH_dynamic_remove_ship_shield_damage_mult
    remove_modifier = TH_dynamic_remove_ship_hull_damage_mult
    remove_modifier = TH_dynamic_remove_ship_tracking_mult
    remove_modifier = TH_dynamic_remove_ship_accuracy_mult
    remove_modifier = TH_dynamic_remove_ship_weapon_damage
    remove_modifier = TH_dynamic_remove_ship_hull_regen_add_perc
    remove_modifier = TH_dynamic_remove_ship_armor_regen_add_perc
    remove_modifier = TH_dynamic_remove_ship_shield_regen_add_perc
    remove_modifier = TH_dynamic_remove_ship_hull_mult
    remove_modifier = TH_dynamic_remove_ship_armor_mult
    remove_modifier = TH_dynamic_remove_ship_shield_mult
    remove_modifier = TH_dynamic_remove_ship_shield_reduction
    remove_modifier = TH_dynamic_remove_ship_armor_reduction
    remove_modifier = TH_dynamic_remove_ship_weapon_range_mult
    remove_modifier = TH_dynamic_remove_ship_tracking_add
    remove_modifier = TH_dynamic_remove_ship_accuracy_add
    remove_modifier = TH_dynamic_remove_ship_armor_add
    remove_modifier = TH_dynamic_remove_ship_shield_add
    remove_modifier = TH_dynamic_remove_ship_armor_hardening_add
    remove_modifier = TH_dynamic_remove_ship_shield_hardening_add
    remove_modifier = TH_dynamic_remove_ship_evasion_mult
    remove_modifier = TH_dynamic_remove_ship_evasion_add

    # 二次修正使用
    remove_modifier = TH_dynamic_reset_ship_speed_mult
    remove_modifier = TH_dynamic_reset_ship_shield_penetration_mult
    remove_modifier = TH_dynamic_reset_ship_armor_penetration_mult
    remove_modifier = TH_dynamic_reset_ship_shield_penetration_add
    remove_modifier = TH_dynamic_reset_ship_armor_penetration_add
    remove_modifier = TH_dynamic_reset_ship_armor_damage_mult
    remove_modifier = TH_dynamic_reset_ship_shield_damage_mult
    remove_modifier = TH_dynamic_reset_ship_hull_damage_mult
    remove_modifier = TH_dynamic_reset_ship_tracking_mult
    remove_modifier = TH_dynamic_reset_ship_accuracy_mult
    remove_modifier = TH_dynamic_reset_ship_weapon_damage
    remove_modifier = TH_dynamic_reset_ship_weapon_range_mult
    remove_modifier = TH_dynamic_reset_ship_fire_rate_mult
    remove_modifier = TH_dynamic_reset_ship_hull_regen_add_perc
    remove_modifier = TH_dynamic_reset_ship_armor_regen_add_perc
    remove_modifier = TH_dynamic_reset_ship_shield_regen_add_perc
    remove_modifier = TH_dynamic_reset_ship_hull_mult
    remove_modifier = TH_dynamic_reset_ship_armor_mult
    remove_modifier = TH_dynamic_reset_ship_shield_mult
    remove_modifier = TH_dynamic_reset_ship_shield_reduction
    remove_modifier = TH_dynamic_reset_ship_armor_reduction
    remove_modifier = TH_dynamic_reset_ship_tracking_add
    remove_modifier = TH_dynamic_reset_ship_accuracy_add
    remove_modifier = TH_dynamic_reset_ship_armor_add
    remove_modifier = TH_dynamic_reset_ship_shield_add
    remove_modifier = TH_dynamic_reset_ship_armor_hardening_add
    remove_modifier = TH_dynamic_reset_ship_shield_hardening_add
    remove_modifier = TH_dynamic_reset_ship_evasion_mult
    remove_modifier = TH_dynamic_reset_ship_evasion_add

    remove_modifier = koishi_improve_energy_damage
    remove_modifier = koishi_improve_kinetic_damage
    remove_modifier = koishi_improve_explosive_damage
    remove_modifier = koishi_improve_special_damage
}

clear_shield = {
    optimize_memory
    if = {
        limit = { has_shield_hp > 0 }
        reduce_shield = trigger:has_shield_hp
    }
}
spth_reduce_shield = {
    optimize_memory
    if = {
        limit = { has_shield_hp > 0 }
        reduce_shield = value:spth_reduce_shield_value|percent|$percent$|factor|$factor$|subtract|2|
    }
}
spth_repair_ship_perc = {
    optimize_memory
    [[all_hp] repair_ship = $all_hp$ ]
    [[hp_perc] repair_percentage = $hp_perc$ ]
    [[ar_perc] repair_armor_percentage = $ar_perc$ ]
}
yukari_kamikakushi_reduce_effect = {
    optimize_memory
    TH_dynamic_modifier_conditional = {
        modifier = ship_shield_hardening_add
        relation = ">"
        limit_value = yukari_kamikakushi_reduction_value
        value = yukari_kamikakushi_reduce_hardening
    }
    TH_dynamic_modifier_conditional = {
        modifier = ship_armor_hardening_add
        relation = ">"
        limit_value = yukari_kamikakushi_reduction_value
        value = yukari_kamikakushi_reduce_hardening
    }
    TH_dynamic_modifier_conditional = {
        modifier = ship_shield_hardening_add
        relation = ">"
        limit_value = yukari_kamikakushi_reduce_value
        value = yukari_kamikakushi_reduce_value
    }
    TH_dynamic_modifier_conditional = {
        modifier = ship_armor_hardening_add
        relation = ">"
        limit_value = yukari_kamikakushi_reduce_value
        value = yukari_kamikakushi_reduce_value
    }
}

spth_always_remove_modifer = {
    optimize_memory
    set_variable = { which = spth_always_remove_$modifier$_var value = 0 }
    export_modifier_to_variable = { modifier = $modifier$ variable = spth_always_remove_$modifier$_var }
    if = {
        limit = { check_variable = { which = spth_always_remove_$modifier$_var value > 0 } }
        set_variable = { which = debug_spth_always_remove_$modifier$ value = spth_always_remove_$modifier$_var }
        add_modifier = { modifier = spth_always_remove_$modifier$ mult = spth_always_remove_$modifier$_var }
    }
    clear_variable = spth_always_remove_$modifier$_var
}
