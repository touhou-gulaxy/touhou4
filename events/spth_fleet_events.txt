namespace = spth_fleet

# 轨道轰炸： 100~200

# Checked when a ship built
# Ship Scope, the ship just be built
# From(Starbase/Megastructure Scope): Shipyard built the ship
ship_event = {
    id = spth_fleet.1
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        OR = {
            is_ship_size = spth_cr_dreadnought
            is_ship_size = spth_ur_didact_flagship
            is_ship_size = TH_super_carrier
            is_ship_size = spth_hv_bombardment_ship
            is_ship_size = spth_remove_shrine_shipyard
            is_ship_size = spth_allocate_shrine_shipyard
        }
    }
    immediate = {
        switch = {
            trigger = is_ship_size
            spth_ur_didact_flagship = {
                set_ship_flag = has_ag_flagship
                set_ship_flag = has_sg_sub_flagship
            }
            spth_cr_dreadnought = {
                if = {
                    limit = { has_component = spth_story_crisis_dreadnought_computer }
                    set_ship_flag = has_sg_sub_flagship
                }
            }
            TH_super_carrier = {
                set_ship_flag = has_ag_flagship
                set_ship_flag = has_sg_sub_flagship
                set_ship_flag = is_spth_super_carrier
                set_variable = { which = spth_super_carrier_inv_counter value = 0 }
            }
            spth_hv_bombardment_ship = {
                set_ship_flag = has_sg_sub_flagship
            }
            spth_remove_shrine_shipyard = {
                from = {
                    if = {
                        limit = { is_scope_type = megastructure is_megastructure_type = th_shrine_mega_shipyard }
                        solar_system = {
                            random_system_planet = {
                                limit = { prevprev = { has_megastructure_flag = is_shrine_shipyard_@prev } }
                                # 船坞数量必须大于0
                                if = {
                                    limit = { check_variable = { which = spth_torifune_shrine_shipyard_count value > 0 } }
                                    change_variable = { which = spth_torifune_shrine_shipyard_count value = -1 }
                                    set_variable = {
                                        which = spth_torifune_shrine_shipyard_rest
                                        value = spth_torifune_shrine_shipyard_count
                                    }
                                    change_variable = { which = spth_torifune_shrine_shipyard_rest value = -6 }
                                    prevprev = {
                                        remove_modifier = spth_spth_torifune_shrine_shipyard_adjust
                                        add_modifier = {
                                            modifier = spth_spth_torifune_shrine_shipyard_adjust
                                            mult = prev.spth_torifune_shrine_shipyard_rest
                                        }
                                    }
                                    clear_variable = spth_torifune_shrine_shipyard_rest
                                    prevprevprev.owner = { change_variable = { which = th_shrine_mega_shipyard_removed_count value = 1 } }
                                }
                            }
                        }
                    }
                }
                fleet = {
                    delete_fleet = {
                        target = this
                        destroy_template = yes
                        kill_leader = no
                    }
                }
                delete_ship = this
            }
            spth_allocate_shrine_shipyard = {
                from = {
                    if = {
                        limit = { is_scope_type = megastructure is_megastructure_type = th_shrine_mega_shipyard }
                        solar_system = {
                            random_system_planet = {
                                limit = { prevprev = { has_megastructure_flag = is_shrine_shipyard_@prev } }
                                # 必须要有可用船坞
                                if = {
                                    limit = { prevprevprev.owner = { check_variable = { which = th_shrine_mega_shipyard_removed_count value > 0 } } }
                                    change_variable = { which = spth_torifune_shrine_shipyard_count value = 1 }
                                    set_variable = {
                                        which = spth_torifune_shrine_shipyard_rest
                                        value = spth_torifune_shrine_shipyard_count
                                    }
                                    change_variable = { which = spth_torifune_shrine_shipyard_rest value = -6 }
                                    prevprev = {
                                        remove_modifier = spth_spth_torifune_shrine_shipyard_adjust
                                        add_modifier = {
                                            modifier = spth_spth_torifune_shrine_shipyard_adjust
                                            mult = prev.spth_torifune_shrine_shipyard_rest
                                        }
                                    }
                                    clear_variable = spth_torifune_shrine_shipyard_rest
                                    prevprevprev.owner = { change_variable = { which = th_shrine_mega_shipyard_removed_count value = -1 } }
                                }
                            }
                        }
                    }
                }
                fleet = {
                    delete_fleet = {
                        target = this
                        destroy_template = yes
                        kill_leader = no
                    }
                }
                delete_ship = this
            }
            default = {
            }
        }
    }
}

#THIS/ROOT=planet##FROM=fleet
planet_event = {
    id = spth_fleet.2
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        save_event_target_as = spth_composer_target
        from.owner = {
            set_variable = {
                which = spth_composer_composed_temp
                value = root.trigger:num_pops
            }
            if = {
                limit = { NOT = { is_variable_set = spth_composer_composed_pops } }
                set_variable = {
                    which = spth_composer_composed_pops
                    value = 0
                }
            }
            change_variable = {
                which = spth_composer_composed_pops
                value = spth_composer_composed_temp
            }
            clear_variable = spth_composer_composed_temp
        }
        hidden_effect = {
            if = {
                limit = {
                    exists = owner
                }
                owner = {
                    if = {
                        limit = {
                            #isn't the case when the crisis bombards planets, for instance
                            is_at_war_with = from.fleet.owner
                        }
                        add_static_war_exhaustion = {
                            attacker = from.fleet.owner
                            location = root
                            value_for_planet_destruction = 1.0
                        }
                    }
                }
            }
            if = {
                limit = {
                    has_observation_outpost = yes
                }
                observation_outpost_owner = {
                    country_event = { id = planet_destruction.1000 days = 1 }
                }
            }
            if = {
                limit = { is_capital = yes }
                from.owner = { set_country_flag = exterminatus }
            }
            if = {
                limit = {
                    exists = owner
                    owner = {
                        NOT = { is_same_value = from.owner }
                        OR = {
                            is_country_type = default
                            is_country_type = fallen_empire
                            is_country_type = awakened_fallen_empire
                        }
                    }
                }
                # Generate threat
                if = {
                    limit = {
                        is_colony = yes
                    }
                    add_threat = { who = from.owner amount = 3 }
                    # modifier for allies + those upset by genocide
                    every_country = {
                        limit = {
                            NOR = {
                                is_same_value = from.owner
                                is_same_value = root.owner
                                AND = {
                                    has_federation = yes
                                    is_in_federation_with = from.owner
                                }
                            }
                            OR = {
                                has_communications = from.owner
                                has_communications = root.owner
                            }
                            OR = {
                                AND = {
                                    has_federation = yes
                                    is_in_federation_with = root.owner
                                }
                                has_ai_personality = awakened_fallen_empire_xenophile
                                AND = {
                                    is_country_type = default
                                    OR = {
                                        is_egalitarian = yes
                                        is_xenophile = yes
                                    }
                                }
                            }
                        }
                        if = {
                            limit = { root = { is_colony = no } }
                            add_opinion_modifier = {
                                modifier = opinion_cracked_an_uninhabited_world
                                who = from.owner
                            }
                        }
                        else = {
                            add_opinion_modifier = {
                                modifier = opinion_cracked_a_world
                                who = from.owner
                            }
                        }
                    }
                }
                else = {
                    add_threat = { who = from.owner amount = 1 }
                }
                # modifiers for victim
                owner = {
                    if = {
                        limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
                        add_modifier = {
                            modifier = colossus_victim
                            days = 10800 # 30 years
                        }
                    }
                }
            }
        }
        destroy_colony = yes
        every_owned_pop = { kill_pop = yes }
    }
}

# 研究完超级航母科技，给舰船设计
# This = Country
country_event = {
    id = spth_fleet.3
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        has_technology = tech_spth_super_carrier
        NOT = { has_country_flag = has_given_spth_super_carrier_designs }
    }
    immediate = {
        set_country_flag = has_given_spth_super_carrier_designs
        spth_unlock_super_carrier = yes
    }
}

# 研究完鸟船船坞调整，给舰船设计
# This = Country
country_event = {
    id = spth_fleet.4
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        has_technology = tech_th_shrine_mega_2_control
        NOT = { has_country_flag = has_given_th_shrine_mega_2_control_designs }
    }
    immediate = {
        set_country_flag = has_given_th_shrine_mega_2_control_designs
        if = {
            limit = { NOT = { has_existing_ship_design = spth_remove_shrine_shipyard } }
            create_ship_design = { design = spth_remove_shrine_shipyard }
            add_ship_design = last_created_design
        }
        if = {
            limit = { NOT = { has_existing_ship_design = spth_allocate_shrine_shipyard } }
            create_ship_design = { design = spth_allocate_shrine_shipyard }
            add_ship_design = last_created_design
        }
        set_variable = { which = th_shrine_mega_shipyard_removed_count value = 0 }
    }
}

# kamikakushi - stole pops
# This = Planet
# From = Bombarder country
planet_event = {
    id = spth_fleet.100
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        has_orbital_bombardment = yes
        has_orbital_bombardment_stance = spth_kamikakushi
        planet_devastation >= 90
    }
    immediate = {
        from = {
            if = {
                limit = { has_ascension_perk = ap_become_the_crisis }
                complete_crisis_objective = crisobj_destroy_worlds
            }
        }
        if = {
            limit = {
                is_planet_class = pc_ai
                NOT = { has_planet_flag = machine_lair }
            }
            set_planet_flag = destroyed_by_colossus
            set_planet_flag = planet_cracked
            planet_event = { id = crisis.2040 }
        }
        # stole pops
        if = {
            limit = {
                is_colony = yes
                num_pops >= 1
            }
            export_trigger_value_to_variable = {
                trigger = num_pops
                variable = spth_kamikakushi_colony_pops_counter
            }
            multiply_variable = { which = spth_kamikakushi_colony_pops_counter value = 0.25 }
            multiply_variable = { which = spth_kamikakushi_colony_pops_counter value = 0.5 }
            ceiling_variable = spth_kamikakushi_colony_pops_counter
            from = {
                # 如果首都人口小于200：转化一半给首都，剩余全部平均转化给非首都
                # 如果首都人口大于200：全部平均转化
                # 平均计算算法(参考并行计算线程任务分配):
                #   每个星球基础转化=floor(转化人口/殖民地数量)
                #   溢出额外转化=floor((转化总数-floor(转化人口/殖民地数量)*殖民地数量)/殖民地数量)
                # 变量表
                # root.spth_kamikakushi_colony_pops_counter 转化人口计数器
                # spth_kamikakushi_colony_pops_avg 平均转换人口
                # kamikakushi_colony_counter 殖民地数量
                # spth_kamikakushi_colony_pops_temp 计算中间变量
                set_variable = { which = kamikakushi_colony_counter value = 0 }
                export_trigger_value_to_variable = { trigger = num_owned_planets variable = kamikakushi_colony_counter }
                # 星球平均转化人口=floor(转化人口/殖民地数量)
                set_variable = {
                    which = spth_kamikakushi_colony_pops_avg
                    value = root.spth_kamikakushi_colony_pops_counter
                }
                divide_variable = { which = spth_kamikakushi_colony_pops_avg value = kamikakushi_colony_counter }
                floor_variable = spth_kamikakushi_colony_pops_avg
                # 计算溢出额外转化人口=floor((转化总数-floor(转化人口/殖民地数量)*殖民地数量)/殖民地数量)
                set_variable = { which = spth_kamikakushi_colony_pops_temp value = spth_kamikakushi_colony_pops_avg }
                multiply_variable = { which = spth_kamikakushi_colony_pops_temp value = kamikakushi_colony_counter }
                multiply_variable = { which = spth_kamikakushi_colony_pops_temp value = -1 }
                change_variable = { which = spth_kamikakushi_colony_pops_temp value = root.spth_kamikakushi_colony_pops_counter }
                floor_variable = spth_kamikakushi_colony_pops_temp
                # 转化人口
                if = {
                    limit = { check_variable = { which = spth_kamikakushi_colony_pops_avg value > 0 } }
                    every_owned_planet = {
                        limit = { is_colony = yes is_capital = no }
                        while = { count = spth_kamikakushi_colony_pops_avg create_pop = { species = owner_main_species } }
                    }
                }
                while = {
                    count = spth_kamikakushi_colony_pops_temp
                    random_owned_planet = {
                        limit = { is_colony = yes is_capital = no }
                        create_pop = { species = owner_main_species }
                    }
                }
                if = {
                    limit = { capital_scope = { num_pops <= 200 } }
                    capital_scope = {
                        while = {
                            count = root.spth_kamikakushi_colony_pops_counter
                            create_pop = { species = owner_main_species }
                        }
                    }
                } else = {
                    every_owned_planet = {
                        limit = { is_colony = yes }
                        while = { count = spth_kamikakushi_colony_pops_avg create_pop = { species = owner_main_species } }
                    }
                    while = {
                        count = spth_kamikakushi_colony_pops_temp
                        random_owned_planet = {
                            limit = { is_colony = yes is_capital = no }
                            create_pop = { species = owner_main_species }
                        }
                    }
                }
                clear_variable = spth_kamikakushi_colony_pops_avg
                clear_variable = spth_kamikakushi_colony_pops_temp
                clear_variable = kamikakushi_colony_counter
            }
            clear_variable = spth_kamikakushi_colony_pops_counter
            destroy_colony = yes
        }
        # Contingency Final Machine World
        if = {
            limit = {
                is_planet_class = pc_ai
                has_planet_flag = machine_lair
            }
            set_planet_flag = destroyed_by_colossus
            set_planet_flag = planet_cracked
            from.owner = { save_event_target_as = final_machine_world_destroyer }
            stop_crisis_sound = yes
            planet_event = { id = crisis.2046 }
        }
        # Swarm Situation Log counter
        if = {
            limit = {
                exists = owner
                owner = { is_country_type = swarm }
            }
            every_country = {
                limit = { has_event_chain = "prethoryn_scourge_chain" }
                add_event_chain_counter = {
                    event_chain = "prethoryn_scourge_chain"
                    counter = "infested_worlds"
                    amount = -1
                }
                add_event_chain_counter = {
                    event_chain = "prethoryn_scourge_chain"
                    counter = "infested_worlds_cleansed"
                    amount = 1
                }
            }
        }

        if = {
            limit = {
                OR = {
                    has_planet_flag = is_spth_megastructure_planet
                    is_planet_class = pc_habitat
                }
            }
            spth_spawn_habitat_cracker_effect = yes
        }
        else_if = {
            limit = { is_ringworld = yes }
            spawn_ringworld_cracker_effect = yes
            # change_pc = pc_ringworld_habitable_damaged
        } else = {
            from = {
                create_message = {
                    type = spth_kamikakushi_clear_planet
                    localization = spth_message_kamikakushi_clear_planet_desc
                    days = 30
                    target = root
                    variable = {
                        type = name
                        localization = PLANET
                        scope = root
                    }
                    variable = {
                        type = name
                        localization = COUNTRY_NAME
                        scope = this
                    }
                }
            }
        }
        add_deposit = d_food_3
        random_list = {
            1 = { while = { count = 8 add_deposit = d_sr_lingli_1 } }
            1 = { while = { count = 12 add_deposit = d_sr_lingli_1 } }
            1 = { while = { count = 16 add_deposit = d_sr_lingli_1 } }
        }
        every_owned_pop = { kill_pop = yes }
        if = {
            limit = {
                NOR = {
                    is_planet_class = pc_ai
                    is_ringworld = yes
                    is_planet_class = pc_habitat
                }
                OR = {
                    is_artificial = no
                    is_planet_class = pc_gensokyo_city
                    is_planet_class = pc_gensokyo_planet
                }
            }
            add_deposit = d_city_ruins
            add_deposit = d_city_ruins
            add_deposit = d_dangerous_wildlife_blocker
            add_deposit = d_dangerous_wildlife_blocker
            add_deposit = d_dangerous_wildlife_blocker
            change_pc = pc_kamikakushi_planet
            from = {
                country_event = {
                    id = spth_fleet.101
                    scopes = {
                        from = root
                    }
                }
            }
        }
    }
}

# 神隐轰炸选择事件
# This = country
# From = planet
country_event = {
    id = spth_fleet.101
    is_triggered_only = yes
    trigger = {
        NOT = { has_country_flag = kamikakushi_planet_select_prevent }
        from = { is_planet_class = pc_kamikakushi_planet }
    }
    title = spth_fleet.101
    desc = spth_fleet.101.desc
    picture = GFX_evt_kamikakushi
    option = {
        name = spth_fleet.101.a
        default_hide_option = yes
    }
    option = {
        name = spth_fleet.101.b
        hidden_effect = {
            set_country_flag = kamikakushi_planet_select_prevent
        }
    }
}
planet_event = {
    id = spth_fleet.102
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        NOT = { has_planet_flag = is_kamikakushi_planet }
        is_planet_class = pc_kamikakushi_planet
    }
    immediate = {
        set_planet_flag = is_kamikakushi_planet
    }
}
planet_event = {
    id = spth_fleet.103
    hide_window = yes
    is_triggered_only = yes
    trigger = { has_planet_flag = is_kamikakushi_planet }
    immediate = {
        add_modifier = { modifier = terraformed_from_kamikakushi }
        add_modifier = { modifier = paradise_planet }
        add_modifier = { modifier = paradise_made }
        add_modifier = { modifier = engineered_nature }
        random_list = {
            1 = { add_modifier = { modifier = second_home } }
            1 = { add_modifier = { modifier = lush_planet } }
            1 = { add_modifier = { modifier = natural_beauty } }
            1 = { add_modifier = { modifier = celebrate_idyllic_bloom } }
        }
        switch = {
            trigger = is_planet_class
            pc_gensokyo_city = {
                remove_planet_flag = is_spth_gensokyo_ringworld
                remove_planet_flag = is_spth_gensokyo_planet
                set_planet_flag = is_spth_gensokyo_city
                spth_change_pc_gensokyo_city_effect = yes
            }
            pc_gensokyo_planet = {
                remove_planet_flag = is_spth_gensokyo_ringworld
                remove_planet_flag = is_spth_gensokyo_city
                set_planet_flag = is_spth_gensokyo_planet
                spth_change_pc_gensokyo_planet_effect = yes
            }
            pc_ringworld_th = {
                remove_planet_flag = is_spth_gensokyo_city
                remove_planet_flag = is_spth_gensokyo_planet
                set_planet_flag = is_spth_gensokyo_ringworld
                spth_change_pc_gensokyo_ringworld_effect = yes
            }
            default = {}
        }
    }
}

# 超级航母战斗系统
# 战斗时每45天可复活10次 完成
# 前30天内每天修复一次全舰队船体，且提升舰队舰船血量 完成
# 30天后每三天修复一次全舰队船体，且提升舰队舰船血量 完成
# 被击毁后对星系内敌方舰船造成致命伤害 完成
# 召唤小型舰船作为火力支援 作为子系统
# 每4天召唤一轮弹幕攻击 作为子系统
# 保障己方的命中追踪 完成
# 四季流转 完成
#
# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
    id = spth_fleet.1000
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        fromfrom = {
            any_owned_ship = {
                is_ship_size = TH_super_carrier
                has_ship_flag = is_spth_super_carrier
                NOT = { has_ship_flag = spth_super_carrier_sys_triggered }
            }
        }
    }
    immediate = { spth_super_carrier_init_system_self = yes }
}

ship_event = {
    id = spth_fleet.1001
    hide_window = yes
    is_triggered_only = yes
    trigger = { has_ship_flag = spth_super_carrier_sys_triggered }
    immediate = {
        if = {
            limit = { is_in_combat = yes }
            spth_super_carrier_main_system_self = yes
            ship_event = { id = spth_fleet.1001 days = 1 }
        } else = { spth_super_carrier_finalize_system_self = yes }
    }
}
# This = Ship
# From = Disabler Ship
ship_event = {
    id = spth_fleet.1002
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        OR = {
            has_ship_flag = spth_super_carrier_sys_triggered
            has_ship_flag = spth_super_carrier_destroyed_storm
        }
    }
    immediate = {
        repair_ship = yes
        if = {
            limit = { has_ship_flag = spth_super_carrier_destroyed_storm }
            repair_ship = yes set_disable_at_health = 0.01 set_disabled = no
        } else = {
            change_variable = { which = spth_super_carrier_inv_counter value = 1 }
            owner = { change_variable = { which = spth_super_carrier_inv_counter value = 1 } }
            if = {
                limit = { check_variable = { which = spth_super_carrier_inv_counter value >= 10 } }
                set_disable_at_health = -1
            } else = {
                set_disable_at_health = 0.01
            }
            set_disabled = no
        }
    }
}
# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
country_event = {
    id = spth_fleet.1003
    hide_window = yes
    is_triggered_only = yes
    trigger = { fromfromfrom = { is_ship_size = TH_super_carrier } }
    immediate = {
        from = {
            remove_country_flag = spth_super_carrier_in_combat
            clear_variable = spth_super_carrier_combat_days
            clear_variable = spth_super_carrier_inv_max
            set_variable = { which = spth_super_carrier_inv_counter value = 0 }
        }
        fromfromfrom = {
            create_fleet = {
                name = spth_super_carrier_destroyed_storm
                settings = {
                    can_upgrade = no
                    spawn_debris = no
                    can_change_leader = no
                    uses_naval_capacity = no
                    is_boss = yes
                    is_ultra_boss = yes
                    garrison = no
                    can_change_composition = no
                }
                effect = {
                    set_owner = root.from
                    create_ship = {
                        design = spth_super_carrier_destroyed_storm
                        effect = {
                            set_name = spth_super_carrier_destroyed_storm
                            set_ship_flag = spth_super_carrier_destroyed_storm
                            set_disable_at_health = 0.01
                            ship_event = { id = Th_dynamic_battle_vict.47 days = 2 }
                        }
                    }
                    create_ship = {
                        design = spth_super_carrier_destroyed_storm_last
                        effect = {
                            set_ship_flag = spth_super_carrier_destroyed_storm
                            set_name = spth_super_carrier_destroyed_storm_last
                            set_disable_at_health = 0.01
                        }
                    }
                    set_location = {
                        target = prev
                        distance = 0
                        angle = random
                    }
                    fleet_event = { id = spth_fleet.1006 days = 4 }
                }
            }
            solar_system = {
                create_ambient_object = {
                    type = "star_explosion"
                    play_animation_once = yes
                    location = prev
                }
                last_created_ambient_object = {
                    set_location = { target = prev distance = 0 angle = random }
                }
            }
        }
    }
}

fleet_event = {
    id = spth_fleet.1005
    hide_window = yes
    is_triggered_only = yes
    immediate = {
        if = {
            limit = { is_in_combat = yes any_owned_ship = { has_ship_flag = spth_super_carrier_sys_triggered } }
            set_update_modifiers_batch = begin
            spth_super_carrier_main_system_self_fleet = yes
            set_update_modifiers_batch = end
            fleet_event = { id = spth_fleet.1005 days = 1 }
        } else = { spth_super_carrier_finalize_system_self_fleet = yes }
    }
}
# 解散效果实体舰队
fleet_event = {
    id = spth_fleet.1006
    hide_window = yes
    is_triggered_only = yes
    immediate = {
        destroy_fleet = {
            target = this
            destroy_template = yes
            kill_leader = no
        }
    }
}
